@page "/konfiguruj"
@inject IJSRuntime JSRuntime
@using Backrooms.Data
@using System.Text.Json
@inject UserDataService _UserService
@inject dbconnService _dbconnService
@inject NavigationManager _navManager

<PageTitle>Konfiguracja</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">Konfiguracja</MudText>
@if (roomsList != null)
{
    <MudGrid class="mb-3">
        @foreach (var item in roomsList)
        {
            <MudItem xs="6">
                <MudCard>
                    <MudCardContent>
                        <MudText>@item.name</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Info">Konfiguruj</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@code {
    List<RoomsData> roomsList;
    
    public string GenerateToken()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 32)
        .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async void CreateCookie(string name, string value, int days)
    {
        var test = await JSRuntime.InvokeAsync<string>("methods.CreateCookie", name, value, days);
    }

    private async Task<string> GetCookie(string name)
    {
        var test = await JSRuntime.InvokeAsync<string>("methods.GetCookie", name);
        return test;
    }

    protected override async Task OnInitializedAsync()
    {
        roomsList = null;
        string _token = await GetCookie("token");

        if (_token == null)
        {
            _token = GenerateToken();
            CreateCookie("token", _token, 4);
        }

        Session session = await _dbconnService.GetSession(_token);
        if (session != null)
        {
            roomsList = session.rooms;
        }
        else 
        {
            _navManager.NavigateTo("/");
        }
    }
}

