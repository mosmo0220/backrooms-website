@page "/"
@inject IJSRuntime JSRuntime
@using Backrooms.Data
@using System.Text.Json
@inject UserDataService _UserService
@inject MongoConnectService _dbconnService
@inject IHttpContextAccessor _test

<PageTitle>Index</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">
    Backrooms 
    @if (!isDesktop){
        <br>
    }
    <MudIconButton Icon="@Icons.Custom.Brands.Discord" Color="Color.Inherit" Link="https://discord.gg/apHpSwN6tV" Target="_blank" Size="Size.Large" />    
    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/kubek420/backrooms-bot" Target="_blank" Size="Size.Medium" />
</MudText>
<MudText Class="mb-8">Bot pozwalający na tworzenie stref prywatnych!</MudText>
<MudText Class="mb-8">
    <MudFab Class="mb-3 mr-3" Color="Color.Primary"
        Href="https://discord.com/api/oauth2/authorize?client_id=1000188282841350144&permissions=8&scope=applications.commands%20bot"
        Label="Dodaj bota" StartIcon="@Icons.Material.Filled.Download"></MudFab>
    @if (user != null)
    {
        <MudFab Class="mb-3 mr-3" Color="Color.Info" Href="konfiguruj" Label="Konfiguruj bota"
        StartIcon="@Icons.Material.Filled.Settings"></MudFab>
        <MudFab Class="mb-3 mr-3" Color="Color.Error" Href="wyloguj" Label="Wyloguj sie"
        StartIcon="@Icons.Material.Filled.Logout"></MudFab>
        <div Class="d-flex mb-3 align-items-center h-auto">
            <MudAvatar Image="@user.avatar_url" /> &nbsp;&nbsp;<MudText class="align-middle" Typo="Typo.h6"
            style="line-height: 40px">@(user.username)#@(user.discriminator)</MudText>
        </div>
    }
    else
    {
        <MudFab Class="mb-3" Color="Color.Info"
        Href="https://discord.com/api/oauth2/authorize?client_id=1000188282841350144&redirect_uri=https%3A%2F%2Fbackrooms.asynctask.pl%2Flogin-callback&response_type=code&scope=identify%20guilds%20guilds.members.read"
        Label="Zaloguj sie" StartIcon="@Icons.Material.Filled.Login"></MudFab>
    }

</MudText>

<MudDivider class="mb-10" />

<MudPaper Height="auto" Width="100%">
    <MudContainer MaxWidth="MaxWidth.Large" Class="pt-10" style="word-break: break-all;">
        <MudText Typo="Typo.h5" GutterBottom="true">
        Szybka obsługa 
        @if (isDesktop) 
        { 
            <span>- Komendy</span> 
        }
        </MudText>
    </MudContainer>
    <MudContainer MaxWidth="MaxWidth.Large" Class="pb-10" style="word-break: break-all;">
            <MudTabs Outlined="true" @bind-Position="position" Rounded="true" Border="true" ApplyEffectsToContainer="true" Class="mt-8" PanelClass="pa-6" AlwaysShowScrollButtons="true">
                <MudTabPanel Text="/starter">
                <MudText>
                    <b>/starter - </b>utworzy kategorię z dwoma domyślnymi kanałami<br>
                    <b>&nbsp;• #how-to-use</b> - kanał z instrukcją dotyczącą tworzenia pokoi<br>
                    <b>&nbsp;• #utwórz</b> - kanał gdzie możesz stworzyć prywatny pokój<br>
                    <MudChip Icon="@Icons.Filled.Info" Size="Size.Small" Variant="Variant.Text" Color="Color.Warning">Dostęp mają tylko administratorzy.</MudChip><br>
                </MudText>
            </MudTabPanel>
            <MudTabPanel Text="/add">
                <MudText>
                    <b>/add &lt;user&gt; -</b> dodaje osobę do pokoju<br>
                    <MudChip Icon="@Icons.Filled.Info" Size="Size.Small" Variant="Variant.Text" Color="Color.Warning">Może być użyta
                        przez właściciela pokoju</MudChip><br>
                    <MudChip Icon="@Icons.Filled.Info" Size="Size.Small" Variant="Variant.Text" Color="Color.Secondary">Wyłącznie kanał konfiguracyjnym pokoju</MudChip>
                </MudText>
            </MudTabPanel>
            <MudTabPanel Text="/remove">
                <MudText>
                    <b>/remove &lt;user&gt; - </b>usuwa dostęp do prywatnej sesji danej osoby <br>
                    <MudChip Icon="@Icons.Filled.Info" Size="Size.Small" Variant="Variant.Text" Color="Color.Warning">Może być użyta
                        przez właściciela pokoju</MudChip><br>
                    <MudChip Icon="@Icons.Filled.Info"  Size="Size.Small" Variant="Variant.Text" Color="Color.Secondary">Wyłącznie kanał konfiguracyjnym pokoju</MudChip>
                </MudText>
            </MudTabPanel>
            <MudTabPanel Text="/list">
                <MudText>
                    <b>/list - </b>wypisuje listę osób w danym pokoju<br>
                    <MudChip Icon="@Icons.Filled.Info" Size="Size.Small" Variant="Variant.Text" Color="Color.Warning">Może być użyta
                        przez właściciela pokoju</MudChip><br>
                    <MudChip Icon="@Icons.Filled.Info"  Size="Size.Small" Variant="Variant.Text" Color="Color.Secondary">Wyłącznie kanał konfiguracyjnym pokoju</MudChip>
                </MudText>
            </MudTabPanel>
            <MudTabPanel Text="/clear">
                <MudText>
                    <b>/clear - </b>czyści wybraną ilość wiadomości<br>
                    <MudChip Icon="@Icons.Filled.Info" Size="Size.Small" Variant="Variant.Text" Color="Color.Warning">Może być użyta
                        przez właściciela pokoju</MudChip><br>
                </MudText>
            </MudTabPanel>
        </MudTabs>
    </MudContainer>
</MudPaper>

@code {
    UserData user;
    int windowWidth;

    [Parameter]
    public Position position { get; set; }
    [Parameter]
    public bool isDesktop { get; set; }
    public string GenerateToken()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 32)
        .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async void CreateCookie(string name, string value, int days)
    {
        var test = await JSRuntime.InvokeAsync<string>("methods.CreateCookie", name, value, days);
    }

    private async Task<string> GetCookie(string name)
    {
        var test = await JSRuntime.InvokeAsync<string>("methods.GetCookie", name);
        return test;
    }
    [JSInvokable("BrowserHasResized")]
    public async Task BrowserHasResized()
    {
        windowWidth = await JSRuntime.InvokeAsync<int>("methods.GetWindowWidth");
        await LayoutChange();
        StateHasChanged();
    }

    async Task LayoutChange() {
        position = windowWidth > 800 ? Position.Left : Position.Top;
        isDesktop = windowWidth > 800;
    }

    protected override async Task OnInitializedAsync()
    {
        windowWidth=1000;
        user = null;
        string _token = await GetCookie("token");
        string userIP = await JSRuntime.InvokeAsync<string>("methods.GetIpAddress");

        if (_token == null)
        {
            _token = GenerateToken();
            CreateCookie("token", _token, 4);
        }

        var lDotNetReference = DotNetObjectReference.Create(this);
        JSRuntime.InvokeVoidAsync("GLOBAL.SetDotnetReference", lDotNetReference);

        await JSRuntime.InvokeAsync<object>("methods.registerResizeCallback");
        windowWidth = await JSRuntime.InvokeAsync<int>("methods.GetWindowWidth");
        await LayoutChange();

        Session session = await _dbconnService.GetSession(_token, userIP);
        if (session != null)
        {
            user = session.user;
        }
    }
}