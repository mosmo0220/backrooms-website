@page "/login-callback"
@inject IJSRuntime JSRuntime
@using Backrooms.Data
@using System.Text.Json
@inject UserDataService _UserService
@inject MongoConnectService _dbconnService
@inject NavigationManager _navManager


<MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true" style="position: absolute; margin-left: auto; margin-right: auto; left: 0; right: 0; text-align: center;" />

@code {
    UserData user;
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "code")]
    public string codeString { get; set; }
    public string GenerateToken()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 32)
        .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async void CreateCookie(string name, string value, int days)
    {
        var test = await JSRuntime.InvokeAsync<string>("methods.CreateCookie", name, value, days);
    }

    private async Task<string> GetCookie(string name)
    {
        var test = await JSRuntime.InvokeAsync<string>("methods.GetCookie", name);
        return test;
    }

    protected override async Task OnInitializedAsync()
    {
        user = null;
        string _token = await GetCookie("token");
        string userIP = await JSRuntime.InvokeAsync<string>("methods.GetIpAddress");

        if (_token == null)
        {
            _token = GenerateToken();
            CreateCookie("token", _token, 4);
        }

        Session session = await _dbconnService.GetSession(_token, userIP);
        if (session != null)
        {
            user = session.user;
        }

        if (codeString != null)
        {
            string jsonString = await _UserService.GetToken(codeString);
            DiscordToken jsonToken = JsonSerializer.Deserialize<DiscordToken>(jsonString);
            if (jsonToken.access_token != null)
            {
                string jsonString2 = await _UserService.GetData(jsonToken);
                UserData jsonUser = JsonSerializer.Deserialize<UserData>(jsonString2);
                if (jsonUser.id != null)
                {
                    user = jsonUser;
                    user.avatar_url = $"https://cdn.discordapp.com/avatars/{user.id}/{user.avatar}";
                }
                else
                {
                    user = null;
                }

                var token = GenerateToken();

                await _dbconnService.SaveSession(new Session()
                {
                    user = user,
                    token = token,
                    ipv4 = userIP
                });

                CreateCookie("token", token, 4);
            }
        }
        _navManager.NavigateTo("/");
    }
}